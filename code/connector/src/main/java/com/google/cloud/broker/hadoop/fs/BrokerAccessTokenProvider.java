// Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.cloud.broker.hadoop.fs;

import java.io.IOException;
import java.security.PrivilegedAction;
import java.util.Collections;
import java.util.Set;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.security.UserGroupInformation;

import com.google.cloud.hadoop.util.AccessTokenProvider;

// Classes dynamically generated by protobuf-maven-plugin:
import com.google.cloud.broker.apps.brokerserver.protobuf.GetAccessTokenRequest;
import com.google.cloud.broker.apps.brokerserver.protobuf.GetAccessTokenResponse;


public final class BrokerAccessTokenProvider implements AccessTokenProvider {

    private Configuration config;
    private AccessToken accessToken;
    private BrokerTokenIdentifier tokenIdentifier;
    private Text service;

    private final static AccessToken EXPIRED_TOKEN = new AccessToken("", -1L);

    public BrokerAccessTokenProvider(Text service) {
        this.service = service;
        this.accessToken = EXPIRED_TOKEN;
    }

    public BrokerAccessTokenProvider(Text service, BrokerTokenIdentifier bti) {
        this.service = service;
        this.tokenIdentifier = bti;
        this.accessToken = EXPIRED_TOKEN;
    }

    @Override
    public AccessToken getAccessToken() {
        return this.accessToken;
    }

    @Override
    public void refresh() {
        UserGroupInformation currentUser;
        UserGroupInformation loginUser;
        try {
            currentUser = UserGroupInformation.getCurrentUser();
            loginUser = UserGroupInformation.getLoginUser();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        GetAccessTokenResponse response = loginUser.doAs((PrivilegedAction<GetAccessTokenResponse>) () -> {
            BrokerGateway gateway;
            GetAccessTokenRequest request;
            if (tokenIdentifier == null) {  // Direct authentication
                gateway = new BrokerGateway(config, null);
                request = GetAccessTokenRequest.newBuilder()
                    .addAllScopes(Collections.singleton(BrokerTokenIdentifier.GCS_SCOPE))
                    .setOwner(currentUser.getUserName())
                    .setTarget(service.toString())
                    .build();

            }
            else {  // Delegated authentication
                gateway = new BrokerGateway(config, tokenIdentifier.getSessionToken());
                request = GetAccessTokenRequest.newBuilder().build();
            }
            GetAccessTokenResponse r = gateway.getStub().getAccessToken(request);
            gateway.getManagedChannel().shutdown();
            return r;
        });

        String tokenString = response.getAccessToken();
        long expiresAt = response.getExpiresAt();
        accessToken = new AccessToken(tokenString, expiresAt);
    }

    @Override
    public void setConf(Configuration config) {
        this.config = config;
    }

    @Override
    public Configuration getConf() {
        return this.config;
    }

}