# Copyright 2020 Google LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

resource "google_service_account" "broker" {
  account_id   = "broker"
  display_name = "Broker's service account"
}

# Allow token creator role on itself. Necessary to enable the domain-wide
# delegation flow.
resource "google_service_account_iam_member" "broker_self_token_creator" {
  service_account_id = google_service_account.broker.name
  role               = "roles/iam.serviceAccountTokenCreator"
  member             = "serviceAccount:${google_service_account.broker.email}"
}

// Secret Manager ------------------------------------------------------

resource "google_project_iam_member" "secret_accessor" {
  role   = "roles/secretmanager.secretAccessor"
  member = "serviceAccount:${google_service_account.broker.email}"
  project = var.gcp_project
}

// Datastore ------------------------------------------------------

resource "google_project_iam_member" "datastore_user" {
  role   = "roles/datastore.user"
  member = "serviceAccount:${google_service_account.broker.email}"
  project = var.gcp_project
}

# Create App Engine so the broker can use Datastore
resource "google_app_engine_application" "app" {
  location_id = var.datastore_region
}

// Logging & Monitoring --------------------------------------------

resource "google_project_iam_member" "log_writer" {
  role   = "roles/logging.logWriter"
  member = "serviceAccount:${google_service_account.broker.email}"
  project = var.gcp_project
}

resource "google_project_iam_member" "metric_writer" {
  role   = "roles/monitoring.metricWriter"
  member = "serviceAccount:${google_service_account.broker.email}"
  project = var.gcp_project
}

// Encryption -------------------------------------------------------

resource "google_kms_key_ring" "broker_key_ring" {
  name       = "broker-key-ring"
  location   = var.gcp_region
  depends_on = [google_project_service.service_kms]
}

resource "google_kms_crypto_key" "broker_key" {
  name     = "broker-key"
  key_ring = google_kms_key_ring.broker_key_ring.id
}

resource "google_kms_key_ring_iam_binding" "key_ring" {
  key_ring_id = "${var.gcp_project}/${var.gcp_region}/${google_kms_key_ring.broker_key_ring.name}"
  role        = "roles/cloudkms.cryptoKeyEncrypterDecrypter"
  members = [
    "serviceAccount:${google_service_account.broker.email}",
  ]
}

// Config files --------------------------------------------------------

resource "null_resource" "create_deploy_directory" {
  provisioner "local-exec" {
    command = <<EOT
      mkdir -p ../deploy/${var.gcp_project}
    
EOT

  }
}

resource "local_file" "broker_conf" {
  depends_on = [null_resource.create_deploy_directory]
  content    = <<EOT
#############################################################################
# This file was automatically generated by Terraform. Do not edit manually. #
#############################################################################

gcp-project = "${var.gcp_project}"
encryption.cloud-kms.kek-uri = "${google_kms_crypto_key.broker_key.id}"
encryption.cloud-kms.dek-uri = "file:///secrets/dek"
proxy-users = [{
  proxy = "hive/test-cluster-m.${var.gcp_zone}.c.${var.gcp_project}.internal@${var.dataproc_realm}",
  users = [
    %{ for test_user in var.test_users ~}
    "${test_user}@${var.gsuite_domain}"
    %{ endfor ~}
  ]
}]
user-mapping.rules=[{
    if: "realm == '${var.origin_realm}'",
    then: "primary + '@${var.gsuite_domain}'"
}]

user-mapping.rules=[
  {
    if: "realm == '${var.origin_realm}'",
    then: "primary + '@${var.gsuite_domain}'"
  },
  # Be cautious when using short names (i.e. without a realm).
  # See documentation at https://github.com/GoogleCloudPlatform/gcp-token-broker/blob/master/docs/concepts/user-mapping.md#important-warning-about-short-names
  # for more details.
  {
    if: "realm == null",
    then: "primary + '@${var.gsuite_domain}'"
  }
]

authentication.spnego.keytabs = [{keytab="/secrets/keytab", principal="broker@${var.dataproc_realm}"}]
server.tls.enabled = false
oauth.client-secret-json-path = "/secrets/oauth-client"
remote-cache.backend = "com.google.cloud.broker.caching.remote.CloudDatastoreCache"
logging.level = "INFO"
secret-manager {
  downloads = [
      {secret="projects/${var.gcp_project}/secrets/keytab/versions/latest", file="/secrets/keytab", required=false},
      {secret="projects/${var.gcp_project}/secrets/dek/versions/latest", file="/secrets/dek"},
      {secret="projects/${var.gcp_project}/secrets/oauth-client/versions/latest", file="/secrets/oauth-client"}
  ]
}
EOT
  filename   = "../deploy/${var.gcp_project}/broker-server.conf"
}


resource "local_file" "authorizer_conf" {
  depends_on = [null_resource.create_deploy_directory]
  content    = <<EOT
#############################################################################
# This file was automatically generated by Terraform. Do not edit manually. #
#############################################################################

gcp-project = "${var.gcp_project}"
oauth.client-secret-json-path = "/secrets/oauth-client"
encryption.cloud-kms.kek-uri = "${google_kms_crypto_key.broker_key.id}"
encryption.cloud-kms.dek-uri = "file:///secrets/dek"
logging.level = "INFO"
secret-manager {
  downloads = [
      {secret="projects/${var.gcp_project}/secrets/dek/versions/latest", file="/secrets/dek"},
      {secret="projects/${var.gcp_project}/secrets/oauth-client/versions/latest", file="/secrets/oauth-client"}
  ]
}
EOT
  filename   = "../deploy/${var.gcp_project}/authorizer.conf"
}
